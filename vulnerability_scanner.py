from flask import Flask, render_template, request, send_file
import os
import threading
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import nmap
from zapv2 import ZAPv2

app = Flask(__name__)

# Simulated scan functions for different vulnerabilities
def run_sqlmap_scan(url):
    command = f"sqlmap -u {url} --batch --dump"
    os.system(command)
    return f"SQLMap scan completed for {url}"

def run_zap_scan(url):
    zap = ZAPv2()
    zap.urlopen(url)
    zap.ascan.scan(url)

    while int(zap.ascan.status()) < 100:
        pass  # Wait until scan is done
    alerts = zap.core.alerts(baseurl=url)
    return f"OWASP ZAP scan completed for {url}. Found {len(alerts)} alerts."

def run_nmap_scan(ip):
    nm = nmap.PortScanner()
    nm.scan(ip, '1-1024')
    ports = [port for port in nm[ip]['tcp']]
    return f"Nmap scan completed for {ip}. Open ports: {ports}"

# Function to generate PDF report
def generate_pdf_report(scan_results, filename='report.pdf'):
    c = canvas.Canvas(filename, pagesize=letter)
    c.drawString(100, 750, "Vulnerability Scan Report")
    y = 700
    for result in scan_results:
        c.drawString(100, y, result)
        y -= 20
    c.save()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/run_scan', methods=['POST'])
def run_scan():
    target_url = request.form.get('url')
    target_ip = request.form.get('ip')
    scan_type = request.form.get('scan_type')

    if scan_type == 'SQLMap':
        result = run_sqlmap_scan(target_url)
    elif scan_type == 'ZAP':
        result = run_zap_scan(target_url)
    elif scan_type == 'Nmap':
        result = run_nmap_scan(target_ip)
    
    # Create a PDF report
    scan_results = [result]
    generate_pdf_report(scan_results)
    
    return render_template('results.html', result=result)

@app.route('/download_report')
def download_report():
    return send_file('report.pdf', as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)
